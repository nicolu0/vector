<script lang="ts">
	import projectData from '$lib/mock/project.sample.json';

	type Job = { title: string; url: string };
	type Difficulty = 'Easy' | 'Medium' | 'Hard' | 'Expert';
	type Project = {
		title: string;
		difficulty: Difficulty;
		description: string;
		jobs: Job[];
		skills: string[];
	};

	const project = $state(projectData as Project);

	let copied = $state(false);
	async function copyBrief() {
		try {
			await navigator.clipboard.writeText(`${project.title}\n\n${project.description}`);
			copied = true;
			setTimeout(() => (copied = false), 1200);
		} catch {}
	}

	function openLink(u: string) {
		if (u) window.open(u, '_blank', 'noopener,noreferrer');
	}

	function difficultyClasses(level: Difficulty): string {
		switch (level) {
			case 'Easy':
				return 'bg-emerald-300 text-emerald-800';
			case 'Medium':
				return 'bg-amber-200 text-amber-800';
			case 'Hard':
				return 'bg-rose-200 text-white border-rose-700';
			case 'Expert':
				return 'bg-purple-600 text-white border-rose-700';
			default:
				return 'bg-stone-700 text-white border-stone-800';
		}
	}
</script>

<!-- page -->
<div class="min-h-dvh w-full bg-stone-50 px-4 py-8 text-stone-800 sm:px-6 lg:px-8">
	<div class="mx-auto w-full max-w-4xl">
		<!-- title row -->
		<div class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
			<div class="text-3xl font-semibold tracking-tight text-stone-900 sm:text-4xl lg:text-5xl">
				{project.title}
			</div>

			<div class="flex items-center gap-2">
				<div
					class={'inline-flex items-center rounded-full border px-3 py-1 text-xs font-medium ' +
						difficultyClasses(project.difficulty)}
				>
					{project.difficulty}
				</div>

				<button
					class="rounded-full border border-stone-300 bg-white px-3 py-1.5 text-xs font-medium text-stone-700 hover:bg-stone-100 active:scale-[0.98]"
					on:click={copyBrief}
				>
					{copied ? 'Copied' : 'Copy brief'}
				</button>
			</div>
		</div>

		<!-- brief card -->
		<div
			class="mt-5 rounded-2xl border border-stone-200 bg-white p-5 shadow-[0_1px_0_rgba(0,0,0,0.04)]"
		>
			<div class="mb-2 text-sm font-semibold tracking-tight text-stone-900">Project brief</div>
			<div class="text-[15px] leading-7 text-stone-700">
				{project.description}
			</div>
		</div>

		<!-- jobs card -->
		<div
			class="mt-5 rounded-2xl border border-stone-200 bg-white p-4 shadow-[0_1px_0_rgba(0,0,0,0.04)] sm:p-5"
		>
			<div class="mb-3 flex items-center justify-between">
				<div class="text-sm font-semibold tracking-tight text-stone-900">Jobs this maps to</div>
				<div class="text-xs text-stone-500">
					{project.jobs.length} source{project.jobs.length === 1 ? '' : 's'}
				</div>
			</div>

			{#if project.jobs.length === 0}
				<div class="rounded-lg border border-stone-200 bg-stone-50 p-4 text-sm text-stone-600">
					No job links provided. Generate again with listings to make this laser-targeted.
				</div>
			{:else}
				<div class="divide-y divide-stone-200 rounded-xl border border-stone-200">
					{#each project.jobs as j, i}
						<div
							class="flex items-center justify-between gap-4 bg-white px-3 py-3 first:rounded-t-xl last:rounded-b-xl sm:px-4"
						>
							<div class="min-w-0">
								<div class="truncate text-[15px] font-medium text-stone-800">
									{j.title}
								</div>
								<div class="truncate text-xs text-stone-500">
									{j.url}
								</div>
							</div>
							<button
								class="shrink-0 rounded-md border border-stone-300 bg-white px-3 py-1.5 text-xs font-medium text-stone-700 hover:bg-stone-100 active:scale-[0.98]"
								on:click={() => openLink(j.url)}
							>
								Open
							</button>
						</div>
					{/each}
				</div>
			{/if}
		</div>

		<!-- skills card -->
		<div
			class="mt-5 rounded-2xl border border-stone-200 bg-white p-5 shadow-[0_1px_0_rgba(0,0,0,0.04)]"
		>
			<div class="mb-3 text-sm font-semibold tracking-tight text-stone-900">
				Skills youâ€™ll use/learn
			</div>

			{#if project.skills.length === 0}
				<div class="text-sm text-stone-600">
					No skills attached. Add a skills list when generating.
				</div>
			{:else}
				<div class="flex flex-wrap items-center gap-2">
					{#each project.skills as s}
						<div
							class="inline-flex items-center rounded-full border border-stone-300 bg-stone-50 px-3 py-1 text-xs text-stone-700"
						>
							{s}
						</div>
					{/each}
				</div>
			{/if}
		</div>

		<!-- actions -->
		<div class="mt-8 flex flex-wrap items-center gap-3">
			<button
				class="rounded-full border border-stone-300 bg-white px-4 py-2 text-sm font-medium text-stone-700 hover:bg-stone-100 active:scale-[0.98]"
				on:click={() => (window.location.href = '/')}
			>
				Start over
			</button>

			<button
				class="rounded-full bg-stone-900 px-4 py-2 text-sm font-medium text-white hover:bg-black active:scale-[0.98]"
				on:click={() => {
					/* hook: generate README */
				}}
			>
				Generate README
			</button>

			<button
				class="rounded-full border border-stone-300 bg-white px-4 py-2 text-sm font-medium text-stone-700 hover:bg-stone-100 active:scale-[0.98]"
				on:click={() => {
					/* hook: save to dashboard */
				}}
			>
				Save to dashboard
			</button>
		</div>
	</div>
</div>
