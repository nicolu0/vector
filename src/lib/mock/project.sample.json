{
  "title": "Tetris (Python)",
  "difficulty": "Easy",
  "timeline": "1-2 weeks",
  "description": "Build a polished Tetris clone in Python with a clean game loop, deterministic tetromino logic, wall-kick rotation, scoring, level speed-up, pause, and persistent high scores. Emphasize readable architecture, unit-tested scoring/rotation, and basic performance instrumentation.",
  "jobs": [
    {
      "title": "Gameplay Engineer (Entry)",
      "url": "https://example.com/jobs/gameplay"
    },
    {
      "title": "Python Developer â€” Tools/UI",
      "url": "https://example.com/jobs/python-ui"
    }
  ],
  "skills": [
    "Python",
    "Pygame or PySDL2",
    "Game loop & timing",
    "State machines",
    "Collision detection",
    "SRS-style rotation & wall kicks",
    "Unit testing (pytest)",
    "Basic profiling"
  ],
  "metadata": {
    "milestones": [
      {
        "name": "Introduction",
        "objective": "Assess the user's current Python skills and align scope based on demonstrated gaps.",
        "success_metrics": [
          "Skill check recorded (syntax, functions, classes, file I/O, basic OOP)",
          "Agreed scope notes saved (libraries, testing, stretch goals)",
          "Mentor plan created mapping skills to upcoming tasks"
        ]
      },
      {
        "name": "Setup",
        "objective": "Bootstrap the project, establish the game loop, and explain the end-to-end architecture the user will build.",
        "success_metrics": [
          "Project scaffold created with run script and dependency lockfile",
          "Window renders 10x20 grid; tick/update/draw loop stable at target FPS",
          "Architecture overview doc committed (modules, data flow, responsibilities)"
        ]
      },
      {
        "name": "Implementation & Guidance",
        "objective": "Guide the user through implementing core gameplay and teach concepts as needed, adjusting pace to their understanding.",
        "success_metrics": [
          "All tetrominoes spawn, move, rotate with wall kicks; lock and gravity implemented",
          "Line clear, scoring, level speed-up, pause, and game-over complete with tests for rotation and scoring",
          "High scores persist; README includes run/build/test instructions and a short demo GIF"
        ]
      }
    ]
  }
}
